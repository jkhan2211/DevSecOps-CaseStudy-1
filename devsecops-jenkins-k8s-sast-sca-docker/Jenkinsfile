pipeline {
  agent any
  tools { 
        maven 'Maven_3_2_5'  
    }
  environment {
        SNYK_TOKEN = credentials('SNYK_TOKEN')
        DOCKER_BUILDKIT = '1'
    }
  stages {
    stage('CompileandRunSonarAnalysis') {
            steps {	
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    dir('jenkins-k8s-sast-sca-sonarcloud-creation') {
                        sh '''
                            mvn clean verify -Dmaven.test.failure.ignore=true -Denforcer.skip=true \
                            sonar:sonar \
                            -Dsonar.projectKey=javabuggywebapp \
                            -Dsonar.organization=javabuggywebapp \
                            -Dsonar.host.url=https://sonarcloud.io \
                            -Dsonar.token=1c67a7b0ed4df3e854ccbe03fecf71f381276d13
                        '''
                    }
                }
            }
    }
      
    stage('RunSCAAnalysisUsingSnyk') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    dir('jenkins-k8s-sast-sca-sonarcloud-creation') {
                        sh '''
                            mvn snyk:test -Dmaven.test.failure.ignore=true -Denforcer.skip=true -fn || true
                        '''
                    }
                }
            }
    }

    stage('Build') { 
            steps { 
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    withDockerRegistry([credentialsId: "dockerlogin", url: ""]) {
                        script {
                            try {
                                app = docker.build("asg", "-f jenkins-k8s-sast-sca-sonarcloud-creation/Dockerfile .")
                            } catch (Exception e) {
                                echo "Docker build failed, but continuing: ${e.getMessage()}"
                            }
                        }
                    }
                }
            }
    }

    stage('Push') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    script {
                        try {
                            docker.withRegistry('https://209479307795.dkr.ecr.us-east-1.amazonaws.com', 'ecr:us-east-1:aws-credentials') {
                                app.push("latest")
                            }
                        } catch (Exception e) {
                            echo "Docker push failed, but continuing: ${e.getMessage()}"
                        }
                    }
                }
            }
    }
  }
  post {
    always {
        cleanWs()
    }
  }
}
